;;;; primitive unit tests

(format t "~%testprimitive...")

(test (eq 'a 'a) t)
(test (eq 'a 'b) nil)

(test (+) 0)
(test (+ 1) 1)
(test (+ 1 2) 3)
(test (+ 1 2 3) 6)
(test (+ 1 2.0 3) 6)
(test (+ 1 2.1 3) 6.1)

(test (- 1) -1)
(test (- 1 2) -1)
(test (- 1 2 3) -4)

(test (*) 1)
(test (* 2) 2)
(test (* 2 3) 6)
(test (* 2 3 4) 24)

(test (/ 2) 0.5)
(test (/ 6 2) 3)
(test (/ 24 3 2) 4)

(test (< 1 2) t)
(test (< 2 1) nil)
(test (< 1 2 3 4) t)
(test (> 2 1) t)
(test (<= 1 2 2 3) t)
(test (<= 2 1) nil)
(test (>= 2 1 1) t)
(test (/= 1 2 3) t)
(test (/= 1 2 1) nil)
(test (/= 1 2 2) nil)
(test (/= 1 1) nil)
(test (= 1 1) t)
(test (= 1 2) nil)
(test (= 1 1.0) t)

(test (list 1 2 3) '(1 2 3))
(test (list 1) '(1))
(test (list 1 nil 2) '(1 nil 2))
(test (list 1 2 nil) '(1 2 nil))

(test (do ((i 1 (1+ i))) ((= i 5) 'done)) 'done)
(test (do ((i '(1 2 3) (cdr i))) ((null i) 'done)) 'done)
(test (do ((i 1 (+ i 1)) (j 2)) ((= i 5) (list i j))) '(5 2))
(test (do ((i 1 (+ i 1)) (j 2) k) ((= i 5) (list i j k))) '(5 2 nil))

(test (let ((r nil)) (dotimes (i 5) (setq r (cons i r))) r) '(4 3 2 1 0)) 

(test (let ((r nil)) (dolist (a '(1 2 3)) (setq r (cons a r))) r) '(3 2 1))

(test (format nil "hi") "hi")
(test (format nil "~a" 1) "1")
(test (format nil "~a" #\a) "a")
(test (format nil "~s" #\a) "#\\a")
(test (format nil "hello ~a" "world") "hello world")

(test (char= #\a #\a #\a) t)
(test (char= #\a #\b #\a) nil)
(test (char= #\a #\A #\a) nil)
(test (char/= #\a #\a #\a) nil)
(test (char/= #\a #\b #\a) nil)
(test (char/= #\a #\b #\b) nil)
(test (char/= #\a #\b #\c) t)
(test (char/= #\a #\A) t)
(test (char< #\a #\b #\c) t)
(test (char< #\a #\c #\b) nil)
(test (char> #\c #\b #\a) t)
(test (char> #\c #\a #\b) nil)
(test (char<= #\a #\b #\b) t)
(test (char<= #\a #\c #\b) nil)
(test (char>= #\b #\b #\a) t)
(test (char>= #\c #\a #\b) nil)

(test (char-equal #\a #\a #\a) t)
(test (char-equal #\a #\b #\a) nil)
(test (char-equal #\a #\A #\a) t)
(test (char-not-equal #\a #\a #\a) nil)
(test (char-not-equal #\a #\b #\a) nil)
(test (char-not-equal #\a #\b #\b) nil)
(test (char-not-equal #\a #\b #\c) t)
(test (char-not-equal #\a #\A) nil)
(test (char-lessp #\a #\b #\c) t)
(test (char-lessp #\a #\B #\c) t)
(test (char-greaterp #\c #\b #\a) t)
(test (char-greaterp #\c #\B #\a) t)
(test (char-not-greaterp #\a #\b #\b) t)
(test (char-not-greaterp #\a #\B #\b) t)
(test (char-not-lessp #\b #\b #\a) t)
(test (char-not-lessp #\b #\B #\a) t)

(test (char-code #\a) 97)
(test (code-char 97) #\a)

(test (character #\a) #\a)
(test (character "a") #\a)
(test (character 'a) #\a)
(test (character 97) #\a)

(test (rplaca (cons 1 2) 3) '(3 . 2))
(test (rplacd (cons 1 2) 3) '(1 . 3))

(test (boundp nil) t)
(test (boundp 'definitely-not-bound) nil)

(test (fboundp '+) t)
(test (fboundp 'concatenate) t)
(test (fboundp 'definitely-not-bound) nil)

(test (mod 3 2) 1)
(test (mod 4 2) 0)

(test (rem 3 2) 1)
(test (rem 4 2) 0)

(test (set-char "123" 0 #\a) "a23")
(test (set-char "123" 1 #\a) "1a3")
(test (set-char "123" 2 #\a) "12a")

(test (float 1.0) 1.0)
(test (float 1) 1.0)

(test (floor 2.6) 2)
(test (floor 2.5) 2)
(test (floor 2.4) 2)
(test (floor 0.7) 0)
(test (floor 0.3) 0)
(test (floor -0.3) -1)
(test (floor -0.7) -1)
(test (floor -2.4) -3)
(test (floor -2.5) -3)
(test (floor -2.6) -3)

(test (ceiling 2.6) 3)
(test (ceiling 2.5) 3)
(test (ceiling 2.4) 3)
(test (ceiling 0.7) 1)
(test (ceiling 0.3) 1)
(test (ceiling -0.3) 0)
(test (ceiling -0.7) 0)
(test (ceiling -2.4) -2)
(test (ceiling -2.5) -2)
(test (ceiling -2.6) -2)

(test (truncate 2.6) 2)
(test (truncate 2.5) 2)
(test (truncate 2.4) 2)
(test (truncate 0.7) 0)
(test (truncate 0.3) 0)
(test (truncate -0.3) 0)
(test (truncate -0.7) 0)
(test (truncate -2.4) -2)
(test (truncate -2.5) -2)
(test (truncate -2.6) -2)

(test (round 2.6) 3)
(test (round 2.5) 2)
(test (round 2.4) 2)
(test (round 0.7) 1)
(test (round 0.3) 0)
(test (round -0.3) 0)
(test (round -0.7) -1)
(test (round -2.4) -2)
(test (round -2.5) -2)
(test (round -2.6) -3)

(test (floor 3 2) 1)
(test (ceiling 3 2) 2)
(test (truncate 3 2) 1)
(test (round 3 2) 2)

(test (aref "123" 1) #\2)

(test (sort '(3 1 4 2 1 5) #'<) '(1 1 2 3 4 5))
(test (sort "fesaza" #'char<) "aaefsz")

(test (do* ((a 1 (1+ a)) (b (1+ a) (1+ a))) ((= a 5) b)) 6)

